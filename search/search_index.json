{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Mann's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"#rust-tutorial","title":"Rust Tutorial","text":"<p>To learn how to setup Rust, click here</p>"},{"location":"tutorials/rust-setup/","title":"Setting up a dev container for Rust","text":"<ul> <li>Primary author: Mann Barot</li> <li>Reviewer: Daniel Zhang</li> </ul>"},{"location":"tutorials/rust-setup/#rust","title":"Rust","text":"<p>Created in 2012, Rust is a modern programming language used to create reliable software.</p>"},{"location":"tutorials/rust-setup/#pre-requisites","title":"Pre-requisites","text":""},{"location":"tutorials/rust-setup/#installs","title":"Installs","text":"<ol> <li>Install Git</li> <li>Install Docker</li> <li>Install VS Code</li> </ol> <p>Remember</p> <ul> <li>Rust will be installed in the container, not the host machine</li> <li>Ensure the \"Dev Containers\" extension is installed in VS Code</li> </ul>"},{"location":"tutorials/rust-setup/#steps","title":"Steps","text":"<ol> <li> <p>On a folder on your machine, create a folder using the terminal <pre><code>mkdir RustExample\ncd RustExample\n</code></pre></p> <p>Use <code>git init</code> to initialize a git repository. Use this to create a README: <pre><code>echo \"# Rust Hello World Example by Mann\" &gt; README.md\ngit add README.md\ngit commit -m \"Initial commit with README\"\n</code></pre></p> </li> <li> <p>Open this folder in VS Code</p> </li> <li>Create a folder named \".devcontainer\" (for simplicity) and add a devcontainer.json file in it. Include the following in it: <pre><code>{\n    \"name\": \"RustExample\",\n    \"image\": \"mcr.microsoft.com/vscode/devcontainers/rust:latest\",\n    \"customizations\": {\n      \"extensions\": [\"rust-lang.rust-analyzer\"]\n    }\n    }\n</code></pre></li> </ol> <p>What was that?</p> <p>Your dev container .json file communicates to the container what needs to be setup. In this file, you give it a name (RustExample), install the latest image of Rust, and add a rust analyzer extension</p> <ol> <li> <p>In the .json file, press Ctrl+Shift+P, type and click \"Dev Containers: Rebuild &amp; Reopen Container (just rebuild container is fine too). This might take a minute. (Not working? Ensure Docker is running)</p> </li> <li> <p>Once container starts, open a terminal and use the following to ensure you have the most recent version of Rust <pre><code>rustc --version\n</code></pre></p> </li> <li> <p>In the terminal, run the following <code>cargo new hello --vcs none</code>.</p> </li> <li> <p>In the newly created hello folder (cd hello), go to src --&gt; main.rs file (Rust extension is .rs). Edit to the following code: <pre><code>fn main() {\n    println!(\"Hello, COMP423!\");\n}\n</code></pre></p> </li> <li> <p>cd into the newly made hello folder, run <code>cargo build</code></p> </li> <li>Use <code>./target/debug/hello</code> to run the file. You should see this in the terminal <pre><code>Hello, COMP423!\n</code></pre> If you don't see this, go back to main.rs file and ensure the code is correct</li> <li>You can also use <code>cargo run</code> from the hello subdirectory to compile and run the program in 1 step  </li> </ol> <p>build vs run</p> <p>while <code>cargo build</code> only compiles the project but doesn't actually run it (you have to do it manually as seen above), <code>cargo run</code> does both</p> <p>### Done with the project? Go back using <code>cd ..</code> and use <code>git add .</code> &amp; <code>git commit -m \"\"</code> to log your files using Git</p>"},{"location":"tutorials/rust-setup/#thank-you-for-joining","title":"Thank you for joining!","text":""}]}